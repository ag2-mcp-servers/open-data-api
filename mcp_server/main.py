# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:52:51+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header

from models import (
    AtmsGetResponse,
    AtmsGetResponse1,
    AtmsGetResponse2,
    AtmsGetResponse3,
    AtmsGetResponse4,
    AtmsGetResponse5,
    AtmsGetResponse6,
    AtmsHeadResponse,
    BranchesGetResponse,
    BranchesGetResponse1,
    BranchesGetResponse2,
    BranchesGetResponse3,
    BranchesGetResponse4,
    BranchesGetResponse5,
    BranchesGetResponse6,
    BranchesHeadResponse,
    BusinessCurrentAccountsGetResponse,
    BusinessCurrentAccountsGetResponse1,
    BusinessCurrentAccountsGetResponse2,
    BusinessCurrentAccountsGetResponse3,
    BusinessCurrentAccountsGetResponse4,
    BusinessCurrentAccountsGetResponse5,
    BusinessCurrentAccountsGetResponse6,
    BusinessCurrentAccountsHeadResponse,
    CommercialCreditCardsGetResponse,
    CommercialCreditCardsGetResponse1,
    CommercialCreditCardsGetResponse2,
    CommercialCreditCardsGetResponse3,
    CommercialCreditCardsGetResponse4,
    CommercialCreditCardsGetResponse5,
    CommercialCreditCardsGetResponse6,
    CommercialCreditCardsHeadResponse,
    PersonalCurrentAccountsGetResponse,
    PersonalCurrentAccountsGetResponse1,
    PersonalCurrentAccountsGetResponse2,
    PersonalCurrentAccountsGetResponse3,
    PersonalCurrentAccountsGetResponse4,
    PersonalCurrentAccountsGetResponse5,
    PersonalCurrentAccountsGetResponse6,
    PersonalCurrentAccountsHeadResponse,
    UnsecuredSmeLoansGetResponse,
    UnsecuredSmeLoansGetResponse1,
    UnsecuredSmeLoansGetResponse2,
    UnsecuredSmeLoansGetResponse3,
    UnsecuredSmeLoansGetResponse4,
    UnsecuredSmeLoansGetResponse5,
    UnsecuredSmeLoansGetResponse6,
    UnsecuredSmeLoansHeadResponse,
)

app = MCPProxy(
    description='Latest Swagger specification for OpenData',
    title='Open Data API',
    version='v1.3',
    servers=[
        {
            'url': 'https://developer.openbanking.org.uk/reference-implementation/open-banking/v1.3'
        }
    ],
)


@app.get(
    '/atms',
    description=""" Gets a list of all `ATM` objects. """,
    tags=[
        'atm_status_checks',
        'branch_status_checks',
        'business_account_services',
        'commercial_card_services',
        'personal_account_services',
        'sme_loan_services',
    ],
)
def get_atms(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    if__none__match: Optional[str] = Header(None, alias='If-None-Match'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.head(
    '/atms',
    description=""" Gets header information on the current set of `ATM` data """,
    tags=[
        'atm_status_checks',
        'branch_status_checks',
        'business_account_services',
        'commercial_card_services',
        'personal_account_services',
        'sme_loan_services',
    ],
)
def head_atms(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    if__none__match: Optional[str] = Header(None, alias='If-None-Match'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/branches',
    description=""" Gets a list of all `Branch` objects. """,
    tags=[
        'atm_status_checks',
        'branch_status_checks',
        'business_account_services',
        'commercial_card_services',
        'personal_account_services',
        'sme_loan_services',
    ],
)
def get_branches(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    if__none__match: Optional[str] = Header(None, alias='If-None-Match'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.head(
    '/branches',
    description=""" Gets header information on the current set of `Branch` data """,
    tags=[
        'atm_status_checks',
        'branch_status_checks',
        'business_account_services',
        'commercial_card_services',
        'personal_account_services',
        'sme_loan_services',
    ],
)
def head_branches(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    if__none__match: Optional[str] = Header(None, alias='If-None-Match'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/business-current-accounts',
    description=""" Gets a list of all `Branch Current Account` objects. """,
    tags=[
        'atm_status_checks',
        'branch_status_checks',
        'business_account_services',
        'commercial_card_services',
        'personal_account_services',
        'sme_loan_services',
    ],
)
def get_business_current_accounts(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    if__none__match: Optional[str] = Header(None, alias='If-None-Match'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.head(
    '/business-current-accounts',
    description=""" Gets header information on the current set of `Business Current Account` data """,
    tags=[
        'atm_status_checks',
        'branch_status_checks',
        'business_account_services',
        'commercial_card_services',
        'personal_account_services',
        'sme_loan_services',
    ],
)
def head_business_current_accounts(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    if__none__match: Optional[str] = Header(None, alias='If-None-Match'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/commercial-credit-cards',
    description=""" Gets a list of all `Commerical Credit Card` objects. """,
    tags=[
        'atm_status_checks',
        'branch_status_checks',
        'personal_account_services',
        'business_account_services',
        'commercial_card_services',
        'sme_loan_services',
    ],
)
def get_commercial_credit_cards(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    if__none__match: Optional[str] = Header(None, alias='If-None-Match'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.head(
    '/commercial-credit-cards',
    description=""" Gets header information on the current set of `Commerical Credit Card` data """,
    tags=[
        'atm_status_checks',
        'branch_status_checks',
        'business_account_services',
        'commercial_card_services',
        'personal_account_services',
        'sme_loan_services',
    ],
)
def head_commercial_credit_cards(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    if__none__match: Optional[str] = Header(None, alias='If-None-Match'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/personal-current-accounts',
    description=""" Gets a list of all `Personal Current Account` objects. """,
    tags=[
        'atm_status_checks',
        'branch_status_checks',
        'business_account_services',
        'commercial_card_services',
        'personal_account_services',
        'sme_loan_services',
    ],
)
def get_personal_current_accounts(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    if__none__match: Optional[str] = Header(None, alias='If-None-Match'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.head(
    '/personal-current-accounts',
    description=""" Gets header information on the current set of `Personal Current Account` data """,
    tags=[
        'atm_status_checks',
        'branch_status_checks',
        'business_account_services',
        'commercial_card_services',
        'personal_account_services',
        'sme_loan_services',
    ],
)
def head_personal_current_accounts(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    if__none__match: Optional[str] = Header(None, alias='If-None-Match'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/unsecured-sme-loans',
    description=""" Gets a list of all `Unsercured SME Lending` objects. """,
    tags=[
        'atm_status_checks',
        'branch_status_checks',
        'business_account_services',
        'commercial_card_services',
        'personal_account_services',
        'sme_loan_services',
    ],
)
def get_unsecured_sme_loans(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    if__none__match: Optional[str] = Header(None, alias='If-None-Match'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.head(
    '/unsecured-sme-loans',
    description=""" Gets header information on the current set of `Unsercured SME Lending` data """,
    tags=[
        'atm_status_checks',
        'branch_status_checks',
        'business_account_services',
        'commercial_card_services',
        'personal_account_services',
        'sme_loan_services',
    ],
)
def head_unsecured_sme_loans(
    if__modified__since: Optional[str] = Header(None, alias='If-Modified-Since'),
    if__none__match: Optional[str] = Header(None, alias='If-None-Match'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
